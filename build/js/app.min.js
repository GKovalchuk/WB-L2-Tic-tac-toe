/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _gameLogic_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameLogic.js */ \"./src/js/gameLogic.js\");\n/* harmony import */ var _setTexts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setTexts.js */ \"./src/js/setTexts.js\");\n\r\n\r\n\r\nconst begin = document.getElementById(\"begin\");\r\nconst resetWinsBtn = document.getElementById(\"resetWins\");\r\n\r\n// Получение данных, записанных в localStorage.\r\nconst historyProgress = JSON.parse(localStorage.getItem(\"ticTacToeProgress\"));\r\nconst historyWins = JSON.parse(localStorage.getItem(\"ticTacToeWins\"));\r\n\r\n// Восстановление счетчика побед.\r\nif (historyWins) (0,_setTexts_js__WEBPACK_IMPORTED_MODULE_1__.setWinsText)(historyWins);\r\nelse (0,_setTexts_js__WEBPACK_IMPORTED_MODULE_1__.setWinsText)({ xWins: 0, yWins: 0, draws: 0 });\r\n\r\nconsole.log(historyProgress);\r\n// Создание поля.\r\n(0,_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__.createTicTacToe)(historyProgress, historyWins);\r\n\r\n// Сброс текущего прогресса на поле.\r\nbegin.onclick = _gameLogic_js__WEBPACK_IMPORTED_MODULE_0__.reset;\r\n// Сброс счетчика побед.\r\nresetWinsBtn.onclick = () => {\r\n\t(0,_gameLogic_js__WEBPACK_IMPORTED_MODULE_0__.resetWins)();\r\n\tlocalStorage.setItem(\"ticTacToeWins\", false);\r\n\t(0,_setTexts_js__WEBPACK_IMPORTED_MODULE_1__.setWinsText)({ xWins: 0, yWins: 0, draws: 0 });\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/app.js?");

/***/ }),

/***/ "./src/js/gameLogic.js":
/*!*****************************!*\
  !*** ./src/js/gameLogic.js ***!
  \*****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTicTacToe: () => (/* binding */ createTicTacToe),\n/* harmony export */   reset: () => (/* binding */ reset),\n/* harmony export */   resetWins: () => (/* binding */ resetWins)\n/* harmony export */ });\n/* harmony import */ var _setTexts_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setTexts.js */ \"./src/js/setTexts.js\");\n\r\n\r\n// Создаем массив для квадратов поля.\r\nlet squares = [];\r\n\r\n// Создаем canvas.\r\nconst canvas = document.getElementById(\"canvas\");\r\nconst context = canvas.getContext(\"2d\");\r\n// Подготавливаем переменные.\r\n// Длина стороны поля.\r\nlet sideOfField;\r\n// Длина стороны клетки.\r\nlet side;\r\n// Текущий ход.\r\nlet turn = 0;\r\n// Флаг конца игры.\r\nlet gameOver = false;\r\n// Массив, определяющий, какой знак будет следующим.\r\nconst signs = [\"X\", \"O\"];\r\n// Массив комбинаций знаков для победы.\r\nconst winnerCombinations = [\r\n\t[0, 1, 2],\r\n\t[3, 4, 5],\r\n\t[6, 7, 8],\r\n\t[0, 3, 6],\r\n\t[1, 4, 7],\r\n\t[2, 5, 8],\r\n\t[0, 4, 8],\r\n\t[2, 4, 6],\r\n];\r\nlet mouseX;\r\nlet mouseY;\r\n// Счетчики побед.\r\nlet wins = {\r\n\txWins: 0,\r\n\tyWins: 0,\r\n\tdraws: 0,\r\n};\r\n\r\n// Раскрашиваем.\r\ncontext.fillStyle = \"white\";\r\n\r\nconst setSideOfField = () => {\r\n\tsideOfField = canvas.clientWidth;\r\n\tside = sideOfField / 3;\r\n};\r\n\r\n// Функция для создания квадрата.\r\nfunction createSquare({ x, y, sign, isCursorHere = false }) {\r\n\t// Определяем x и y верхенго левого угла квадрата.\r\n\tconst xSide = x * side;\r\n\tconst ySide = y * side;\r\n\r\n\t// Задаем длину линии знака.\r\n\tconst lineSize = Math.floor(side / 4);\r\n\tcontext.lineWidth = 3;\r\n\t// Рисуем квадрат.\r\n\tcontext.beginPath();\r\n\tcontext.strokeStyle = \"black\";\r\n\tcontext.strokeRect(xSide, ySide, side, side);\r\n\tcontext.stroke();\r\n\r\n\t// Рисуем крестик.\r\n\tconst drawX = (color) => {\r\n\t\tcontext.beginPath();\r\n\t\tcontext.strokeStyle = color;\r\n\t\tcontext.moveTo(xSide + lineSize, ySide + lineSize);\r\n\t\tcontext.lineTo(xSide + side - lineSize, ySide + side - lineSize);\r\n\t\tcontext.moveTo(xSide + side - lineSize, ySide + lineSize);\r\n\t\tcontext.lineTo(xSide + lineSize, ySide + side - lineSize);\r\n\t\tcontext.stroke();\r\n\t};\r\n\r\n\t// Рисуем нолик.\r\n\tconst drawO = (color) => {\r\n\t\tcontext.beginPath();\r\n\t\tcontext.strokeStyle = color;\r\n\t\tcontext.arc(xSide + side / 2, ySide + side / 2, lineSize * 1.05, 0, 2 * Math.PI);\r\n\t\tcontext.stroke();\r\n\t};\r\n\r\n\t// Отрисовываем указание хода.\r\n\tif (isCursorHere && !sign) {\r\n\t\tif (signs[turn] === \"X\") {\r\n\t\t\t// Рисуем крестик.\r\n\t\t\tdrawX(\"#f87c5633\");\r\n\t\t} else {\r\n\t\t\t// Рисуем нолик.\r\n\t\t\tdrawO(\"#3CAE7433\");\r\n\t\t}\r\n\t}\r\n\r\n\t// Отрисовываем знак.\r\n\tif (sign) {\r\n\t\tif (sign === \"X\") {\r\n\t\t\t// Рисуем крестик.\r\n\t\t\tdrawX(\"#f87c56\");\r\n\t\t} else {\r\n\t\t\t// Рисуем нолик.\r\n\t\t\tdrawO(\"#3CAE74\");\r\n\t\t}\r\n\t\tconst strSquares = JSON.stringify(squares);\r\n\t\tlocalStorage.setItem(\"ticTacToeProgress\", strSquares);\r\n\t}\r\n}\r\n\r\nconst reset = () => {\r\n\t// Очищаем канвас.\r\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\t// Обнуляем данные о нарисованных знаках и перерисовываем поле.\r\n\tsquares.forEach((square) => {\r\n\t\tsquare.sign = null;\r\n\t\tsquare.isCursorHere = false;\r\n\t});\r\n\tsquares.forEach((square) => createSquare(square));\r\n\t// Обнуляем счетчик очередности и флаг конца игры.\r\n\tturn = 0;\r\n\tgameOver = false;\r\n\tlocalStorage.setItem(\"ticTacToeProgress\", false);\r\n};\r\n\r\n// Проверяем наличие победителя.\r\nfunction checkForWinner() {\r\n\t// Функция, рисующая текст конца игры.\r\n\tconst drawWinner = (sign = \"Nobody\") => {\r\n\t\t// Накладываем белый фильтр.\r\n\t\tcontext.fillStyle = \"rgba(255, 255, 255, 0.85)\";\r\n\t\tcontext.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t\t// Задаем параметры текста.\r\n\t\tcontext.font = `${side / 2.5}px Arial`;\r\n\t\tcontext.textAlign = \"center\";\r\n\r\n\t\t// Рисуем текст - объявляем победителя.\r\n\t\tif (sign === \"X\") {\r\n\t\t\tcontext.fillStyle = \"#f87c56\";\r\n\t\t\twins.xWins += 1;\r\n\t\t} else if (sign === \"O\") {\r\n\t\t\tcontext.fillStyle = \"#3CAE74\";\r\n\t\t\twins.yWins += 1;\r\n\t\t} else if (sign === \"Nobody\") {\r\n\t\t\tcontext.fillStyle = \"#000000\";\r\n\t\t\twins.draws += 1;\r\n\t\t}\r\n\t\tcontext.fillText(sign + \"  wins!\", (side * 3) / 2, (side * 3) / 2);\r\n\r\n\t\t// Записываем данные в localStorage и обновляем тексты.\r\n\t\tlocalStorage.setItem(\"ticTacToeProgress\", false);\r\n\t\tlocalStorage.setItem(\"ticTacToeWins\", `{\"xWins\":${wins.xWins},\"yWins\":${wins.yWins},\"draws\":${wins.draws}}`);\r\n\t\t(0,_setTexts_js__WEBPACK_IMPORTED_MODULE_0__.setWinsText)(wins);\r\n\t\t(0,_setTexts_js__WEBPACK_IMPORTED_MODULE_0__.setHistoryText)(false);\r\n\t};\r\n\r\n\t// Проходим по массиву победных комбинаций.\r\n\tfor (let i = 0; i < winnerCombinations.length; i += 1) {\r\n\t\tlet comb = winnerCombinations[i];\r\n\t\tlet s1 = squares[comb[0]];\r\n\t\tlet s2 = squares[comb[1]];\r\n\t\tlet s3 = squares[comb[2]];\r\n\t\t// Исключаем те комбинации, где есть пустые клетки.\r\n\t\tif (s1.sign != null) {\r\n\t\t\t// Проверяем на три одинаковых знака.\r\n\t\t\tif (s1.sign == s2.sign && s1.sign == s3.sign) {\r\n\t\t\t\t// Ставис флаг конца игры в true.\r\n\t\t\t\tgameOver = true;\r\n\t\t\t\t// Рисуем текст.\r\n\t\t\t\tdrawWinner(s1.sign);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Проверяем на ничью.\r\n\tlet freeSquares = squares.filter(({ sign }) => sign === null).length;\r\n\tif (freeSquares === 0 && !gameOver) {\r\n\t\tdrawWinner();\r\n\t\tgameOver = true;\r\n\t}\r\n}\r\n\r\n// Функция обработчика событий для кликов на холсте.\r\nfunction click(e) {\r\n\t// Перезагрузка холста по нажатию при конце игры.\r\n\tif (gameOver) {\r\n\t\treset();\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Получаем координаты клика.\r\n\tconst x = e.offsetX;\r\n\tconst y = e.offsetY;\r\n\t// Находим квадрат, к которому принадлежат координаты клика.\r\n\tfor (let square of squares) {\r\n\t\tif (square.sign != null) continue;\r\n\t\tlet xSide = square.x * side;\r\n\t\tlet ySide = square.y * side;\r\n\t\tif (x >= xSide && x <= xSide + side && y >= ySide && y <= ySide + side) {\r\n\t\t\t// Определяем и задаем знак. Сменяем ход.\r\n\t\t\tsquare.sign = signs[turn];\r\n\t\t\tturn = (turn + 1) % 2;\r\n\t\t\t// Отрисовываем новый знак на канвасе.\r\n\t\t\tcreateSquare(square);\r\n\t\t}\r\n\t}\r\n\r\n\t// Проверяем, определен ли победитель.\r\n\tcheckForWinner();\r\n}\r\n\r\n// Сброс счетчика побед.\r\nconst resetWins = () => {\r\n\twins = {\r\n\t\txWins: 0,\r\n\t\tyWins: 0,\r\n\t\tdraws: 0,\r\n\t};\r\n};\r\n\r\nfunction createTicTacToe(historyProgress = false, historyWins) {\r\n\t// Задаем переменные.\r\n\tturn = 0;\r\n\tgameOver = false;\r\n\t// Задаем размеры canvas.\r\n\tsetSideOfField();\r\n\r\n\t// Очищаем canvas.\r\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\tif (historyWins) {\r\n\t\twins = historyWins;\r\n\t}\r\n\r\n\tif (!historyProgress) {\r\n\t\t// Задаем параметры квадратам. Помещаем полученные квадраты в массив.\r\n\t\tfor (let x = 0; x < 3; x += 1) {\r\n\t\t\tfor (let y = 0; y < 3; y += 1) {\r\n\t\t\t\tsquares.push({ x, y, sign: null });\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tsquares = historyProgress;\r\n\t\t(0,_setTexts_js__WEBPACK_IMPORTED_MODULE_0__.setHistoryText)(true);\r\n\t\tsquares.forEach((square) => {\r\n\t\t\tif (square.sign != null) {\r\n\t\t\t\tturn += 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tturn = turn % 2;\r\n\t}\r\n\r\n\t// Рисуем квадраты на холсте.\r\n\tsquares.forEach((square) => createSquare(square));\r\n\r\n\t// Добавляем обработчик событий для кликов на холсте.\r\n\tcanvas.addEventListener(\"click\", (e) => {\r\n\t\tclick(e);\r\n\t});\r\n}\r\n\r\n/*\r\n\tФункция, отслеживающая положение мыши на canvas.\r\n\tОна же устанавливает подсказку - чья очередь ходить.\r\n\t*/\r\ncanvas.addEventListener(\"mousemove\", (event) => {\r\n\t// Не отслеживаем, пока на экране заставка победы.\r\n\tif (gameOver) return;\r\n\t// Получаем размеры canvas.\r\n\tconst sizes = canvas.getBoundingClientRect();\r\n\tconst x = event.clientX - sizes.left;\r\n\tconst y = event.clientY - sizes.top;\r\n\r\n\t// Очищаем canvas.\r\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n\t// Получаем в каком квадрате находится курсор.\r\n\tconst row = Math.floor(y / side);\r\n\tconst col = Math.floor(x / side) * 3;\r\n\tconst curSqr = row + col;\r\n\r\n\t// Отрисовываем canvas с полупрозрачным указателем хода.\r\n\tsquares.forEach((square) => {\r\n\t\tif (square === squares[curSqr]) {\r\n\t\t\tsquare.isCursorHere = true;\r\n\t\t} else {\r\n\t\t\tsquare.isCursorHere = false;\r\n\t\t}\r\n\t\tcreateSquare(square);\r\n\t});\r\n});\r\n\r\n// Создаем прослушиватель изменений для canvas.\r\nconst resizeCanvasObserver = new ResizeObserver((entries) => {\r\n\tconst { width } = entries[0].contentRect;\r\n\tcanvas.width = canvas.height = width;\r\n\tsetSideOfField();\r\n\tsquares.forEach((square) => createSquare(square));\r\n});\r\n\r\n// Запускаем прослушиватель изменений для canvas.\r\nresizeCanvasObserver.observe(canvas);\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/gameLogic.js?");

/***/ }),

/***/ "./src/js/setTexts.js":
/*!****************************!*\
  !*** ./src/js/setTexts.js ***!
  \****************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setHistoryText: () => (/* binding */ setHistoryText),\n/* harmony export */   setWinsText: () => (/* binding */ setWinsText)\n/* harmony export */ });\nconst historyConainer = document.getElementById(\"history\");\r\nconst winsX = document.getElementById(\"winsX\");\r\nconst winsY = document.getElementById(\"winsY\");\r\nconst winsDraw = document.getElementById(\"winsDraw\");\r\n\r\n/*\r\n\tПри запуске игры с записью в истории сохранений, выводим сообщение, пока\r\n\tтекущая партия не завершится\r\n\t*/\r\nconst setHistoryText = (flag = false) => {\r\n\tif (flag) {\r\n\t\thistoryConainer.textContent = `История восстановлена`;\r\n\t} else {\r\n\t\thistoryConainer.textContent = ``;\r\n\t}\r\n};\r\n\r\n// Обновляем поля счетчиков побед.\r\nconst setWinsText = ({ xWins, yWins, draws }) => {\r\n\twinsX.textContent = `Побед Крестика: ${xWins}`;\r\n\twinsY.textContent = `Побед Нолика: ${yWins}`;\r\n\twinsDraw.textContent = `Ничьих: ${draws}`;\r\n};\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/setTexts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_require__("./src/js/app.js");
/******/ 	__webpack_require__("./src/js/gameLogic.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/setTexts.js");
/******/ 	
/******/ })()
;